<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.heiye.dev</id>
    <title>黑夜的博客</title>
    <updated>2019-11-15T07:59:15.768Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.heiye.dev"/>
    <link rel="self" href="https://blog.heiye.dev/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://blog.heiye.dev/images/avatar.png</logo>
    <icon>https://blog.heiye.dev/favicon.ico</icon>
    <rights>All rights reserved 2019, 黑夜的博客</rights>
    <entry>
        <title type="html"><![CDATA[Django 框架之使用 MangoDB 数据库]]></title>
        <id>https://blog.heiye.dev/post/django-kuang-jia-zhi-shi-yong-mangodb-shu-ju-ku</id>
        <link href="https://blog.heiye.dev/post/django-kuang-jia-zhi-shi-yong-mangodb-shu-ju-ku">
        </link>
        <updated>2019-11-15T07:51:04.000Z</updated>
        <content type="html"><![CDATA[<h2 id="mongodb-简介">mongodb 简介</h2>
<p>MongoDB 是基于文档 (Document) 的 NoSQL 数据库。文档是 MongoDB 中数据的基本单元，非常类似于关系数据库中的行(比行要复杂)。</p>
<p>详情请看官网 https://www.mongodb.com/cn</p>
<h2 id="django-集成-mongodb">Django 集成 Mongodb</h2>
<p>在不更改 Django ORM 对情况下，使用 djongo 可以帮助项目跟更好的管理 Mongodb 。</p>
<h3 id="安装与配置">安装与配置</h3>
<p>1.安装</p>
<pre><code>pipenv install djongo 
pipenv install rest-meets-djongo # api 支持

</code></pre>
<p>2.配置 djongo</p>
<pre><code>DATABASES ={

    'default':{
        'ENGINE:'djongo',
        'NAME':'your-db-name',
                }
            }
</code></pre>
<p>3.Models</p>
<p>在 model 文件里面，我们需要配置 djongo 模型</p>
<pre><code>from djongo import models

class Article(models.Model):
		......
</code></pre>
<p>4.序列化</p>
<p>在 DRF 的 serializders.py  使用 DjongoModelSerializer。</p>
<pre><code>from rest_meets_djongo.serializers import DjongoModelSerializer


class ArticleSerializer(DjongoModelSerializer):
    class Meta:
        model = Article
        fields = &quot;__all__&quot;

</code></pre>
<h2 id="参考文献">参考文献</h2>
<p><strong>MongoDB</strong></p>
<ul>
<li>https://www.mongodb.com/</li>
</ul>
<p><strong>rest-meets-djongo</strong></p>
<ul>
<li>https://github.com/SomeoneInParticular/rest_meets_djongo</li>
</ul>
<p><strong>djongo</strong></p>
<ul>
<li>https://github.com/nesdis/djon</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac 安装 PostgreSQL]]></title>
        <id>https://blog.heiye.dev/post/mac-an-zhuang-postgresql</id>
        <link href="https://blog.heiye.dev/post/mac-an-zhuang-postgresql">
        </link>
        <updated>2019-10-16T12:34:05.000Z</updated>
        <content type="html"><![CDATA[<h1 id="安装及初始化">安装及初始化</h1>
<p>这里使用 homebrew 安装</p>
<pre><code>brew install postgresql
</code></pre>
<p>等待安装完成后，初始化：</p>
<pre><code>initdb /usr/local/var/postgres

</code></pre>
<p>启动服务：</p>
<pre><code>pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start

</code></pre>
<p>设置开机启动</p>
<pre><code>ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgents
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist

</code></pre>
<h2 id="创建数据库和账户">创建数据库和账户</h2>
<p>mac 安装 postgresql 后不会创建用户名数据库，执行命令：</p>
<pre><code>createdb

</code></pre>
<p>然后登录 PostgreSQL 控制台：</p>
<pre><code>psql
</code></pre>
<p>使用 <code>\l</code> 命令列出所有的数据库，看到已存在用户同名数据库、postgres 数据库，但是 postgres 数据库的所有者是当前用户，没有 postgres 用户。按 <code>:q</code> 退出查看</p>
<p>之后需要做以下几件事：</p>
<ol>
<li>创建 postgres 用户</li>
</ol>
<pre><code> CREATE USER postgres WITH PASSWORD 'password';

</code></pre>
<ol start="2">
<li>删除默认生成的 postgres 数据库</li>
</ol>
<pre><code> DROP DATABASE postgres;

</code></pre>
<ol start="3">
<li>创建属于 postgres 用户的 postgres 数据库</li>
</ol>
<pre><code>  CREATE DATABASE postgres OWNER postgres;

</code></pre>
<ol start="4">
<li>将数据库所有权限赋予 postgres 用户</li>
</ol>
<pre><code>   GRANT ALL PRIVILEGES ON DATABASE postgres to postgres;

</code></pre>
<ol start="5">
<li>给 postgres 用户添加创建数据库的属性</li>
</ol>
<pre><code>    ALTER ROLE postgres CREATEDB;

</code></pre>
<p>这样就可以使用 postgres 作为数据库的登录用户了，并可以使用该用户管理数据库</p>
<h1 id="登录控制台指令">登录控制台指令</h1>
<pre><code>    psql -U [user] -d [database] -h [host] -p [post]

</code></pre>
<ul>
<li>-U 指定用户，</li>
<li>-d 指定数据库，</li>
<li>-h 指定服务器，</li>
<li>-p 指定端口</li>
</ul>
<p>上方直接使用<code>psql</code>登录控制台，实际上使用的是缺省数据</p>
<pre><code>user：当前 mac 用户
database：用户同名数据库
主机：localhost
端口号：5432，postgresql 的默认端口是 5432

</code></pre>
<p>完整的登录命令，比如使用 postgres 用户登录</p>
<pre><code>psql -U postgres -d postgres
</code></pre>
<h1 id="常用控制台命令">常用控制台命令</h1>
<pre><code>\password：设置当前登录用户的密码
\h：查看SQL命令的解释，比如\h select。
\?：查看psql命令列表。
\l：列出所有数据库。
\c [database_name]：连接其他数据库。
\d：列出当前数据库的所有表格。
\d [table_name]：列出某一张表格的结构。
\du：列出所有用户。
\e：打开文本编辑器。
\conninfo：列出当前数据库和连接的信息。
\password [user]: 修改用户密码
\q：退出
</code></pre>
<blockquote></blockquote>
<p>本文转载于 https://www.jianshu.com/p/10ced5145d39</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nestjs 入门（一）]]></title>
        <id>https://blog.heiye.dev/post/nestjs-ru-men-yi</id>
        <link href="https://blog.heiye.dev/post/nestjs-ru-men-yi">
        </link>
        <updated>2019-10-07T12:28:58.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://nestjs.com/">Nestjs</a> 是 Node 渐进式框架，底层默认使用 express（可以通过 Adapter 转换到 fastify），可以使用 express 或者 fastify 所有中间件，完美支持 TypeScript。熟悉 Spring 和 Angular 的同学可以很快上手 Nestjs，它大量借鉴了 Spring 和 Angular 中的设计思想。</p>
]]></summary>
        <content type="html"><![CDATA[<p><a href="https://nestjs.com/">Nestjs</a> 是 Node 渐进式框架，底层默认使用 express（可以通过 Adapter 转换到 fastify），可以使用 express 或者 fastify 所有中间件，完美支持 TypeScript。熟悉 Spring 和 Angular 的同学可以很快上手 Nestjs，它大量借鉴了 Spring 和 Angular 中的设计思想。</p>
<!-- more -->
<h2 id="安装">安装</h2>
<pre><code>yarn global add @nestjs/cli
nest new project-name
</code></pre>
<h2 id="目录结构">目录结构</h2>
<p>新建项目的目录结构如下：</p>
<pre><code>├── README.md
├── node_modules
├── nodemon-debug.json
├── nodemon.json
├── package-lock.json
├── package.json
├── src
├── test
├── tsconfig.json
├── tsconfig.spec.json
├── tslint.json
└── webpack.config.js
</code></pre>
<p>其中 src 是源码目录，该目录下有以下几个核心文件：</p>
<pre><code>├── app.controller.ts # 根控制器
├── app.module.ts # 应用程序根模块
├── app.service.ts # 根服务
└── main.ts # 应用程序入口文件
</code></pre>
<p>其中 main.ts 的代码如下，它负责引导我们的应用程序：</p>
<pre><code>import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  await app.listen(3000);
}
bootstrap();
</code></pre>
<p>bootstrap 方法是一个异步函数，在该函数内部，通过调用 NestFactory.create 方法创建一个 Nest 应用实例，然后开始监听 3000 端口</p>
<h2 id="运行">运行</h2>
<pre><code>yarn run start:dev
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux 通过 Samba+Avahi 搭建 Time Machine 服务]]></title>
        <id>https://blog.heiye.dev/post/linux-tong-guo-sambaavahi-da-jian-time-machine-fu-wu</id>
        <link href="https://blog.heiye.dev/post/linux-tong-guo-sambaavahi-da-jian-time-machine-fu-wu">
        </link>
        <updated>2019-08-17T15:36:23.000Z</updated>
        <content type="html"><![CDATA[<p>Time Machine 是 macOS 自带的系统级备份软件，配置完成后就可以在后台每天自动备份整机数据，防止手滑、丢失、送修等各种场景。然而实际上，除非购买苹果全家桶的 Time Capsule，不然每次还得手动接上移动硬盘才会自动备份，实在毫无便利性了。下面介绍一种方法，通过 Samba 提供文件共享、 Avahi) 提供服务广播的方式，搭建通过网络进行备份的 Time Machine 备份服务器，实现和 Time Capsule 体验一致的无干预自动备份。</p>
<p>插播一句：Samba 最初是基于 Microsoft 的 SMB 文件共享协议开发的开源实现，Avahi 则是以 Apple 开源的 Bonjour 源码上发展而来的 zeroconf 实现，说到底还是原本就有的协议了</p>
<h1 id="基础环境">基础环境</h1>
<ul>
<li>debian 10</li>
<li>Samba 5</li>
<li>Avahi 0.7+18+g1b5f401-2</li>
<li>备份数据路径：/data/timemachine</li>
</ul>
<h1 id="准备工作">准备工作</h1>
<h2 id="安装-samba-和-avahi">安装 Samba 和 Avahi</h2>
<pre><code>apt install samba
apt install avahi-daemon  #（可选，用于支持网内的计算机自动发现）
</code></pre>
<h2 id="配置-samba">配置 Samba</h2>
<p>首先，我们需要配置 Samba 提供文件共享服务，让 macOS 能够访问到备份数据路径。</p>
<p>首先，需要添加一个 Time Machine 专用的用户。我这里使用了个人用户，反正都是个人数据。</p>
<pre><code># useradd dazzy

</code></pre>
<p>然后，设置该用户的 Samba 协议密码，这个密码跟 Linux 系统用户密码是相互独立的，需要单独设置。</p>
<pre><code># smbpasswd -a dazzy

</code></pre>
<p>接着，就是配置 Samba 让它把备份数据路径暴露出去，直接贴配置文件了。</p>
<pre><code>/etc/samba/smb.conf
[global]
server role = standalone server
hosts allow = 10.42.0.
log file = /var/log/samba/%m.log
map to guest = Bad User
unix extensions = no
allow insecure wide links = yes
follow symlinks = yes
wide links = yes

[Warden TM]                 ; 服务名称，会显示在 Time Machine 备份界面
path = /data/timemachine    ; 备份数据路径
writable = yes              ; 允许SMB客户端写入
valid users = dazzy         ; 允许访问的用户列表，避免备份数据泄漏
; catia: 兼容linux/macos中合法但在Windows/SMB中非法的字符
; fruit: 增强macos的的兼容性，并提供Netatalk AFP服务
; streams_xattr: 通过Linux文件系统提供Windows NTFS属性字段
vfs objects = catia fruit streams_xattr
fruit:aapl = yes            ; 启用Apple SMB客户端兼容
fruit:model = MacPro        ; 修改一下Finder里的图标
fruit:time machine = yes    ; 重要！开启 Time Machine 支持
</code></pre>
<p>最后，就是把 Samba 服务起来啦，这里不要起错成 samba 了。</p>
<pre><code># systemctl enable --now smbd

</code></pre>
<p>这时候就可以通过 macOS Finder 里面的 Go &gt; Connect to Server 验证一下 Samba 服务是否正常了。</p>
<h3 id="配置-avahi">配置 Avahi</h3>
<p>Avahi 不需要配置。没错，直接启动就好了。</p>
<pre><code># systemctl enable --now avahi-daemon

</code></pre>
<h3 id="使用-time-machine">使用 Time Machine</h3>
<p>到这里就可以使用了，在 Preferences &gt; Time Machine &gt; Select Disk 中就可以看到刚才配置的 Warden TM，点击就可以使用了。<br>
甚至用 VPN 连回家里之后，Time Machine 也会继续备份。</p>
<p>本文来之 https://blog.dazzyd.org/providing-time-machine-on-linux/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git 常用命令及使用详解]]></title>
        <id>https://blog.heiye.dev/post/git-chang-yong-ming-ling-ji-shi-yong-xiang-jie</id>
        <link href="https://blog.heiye.dev/post/git-chang-yong-ming-ling-ji-shi-yong-xiang-jie">
        </link>
        <updated>2019-07-23T12:51:03.000Z</updated>
        <summary type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://blog.heiye.dev/post-images/1563886342707.jpg" alt=""></figure>
<h1 id="0x00-写在前面">0x00 写在前面</h1>
<p>现在大部分的开发团队都以 Git 作为自己的版本控制工具，需要对 Git 的使用非常的熟悉。这篇文章中本人整理了自己在开发过程中经常使用到的 Git 命令，方便在偶尔忘记时速查。使用 GUI 工具的同学，也可以对照起来看看。</p>
]]></summary>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://blog.heiye.dev/post-images/1563886342707.jpg" alt=""></figure>
<h1 id="0x00-写在前面">0x00 写在前面</h1>
<p>现在大部分的开发团队都以 Git 作为自己的版本控制工具，需要对 Git 的使用非常的熟悉。这篇文章中本人整理了自己在开发过程中经常使用到的 Git 命令，方便在偶尔忘记时速查。使用 GUI 工具的同学，也可以对照起来看看。</p>
<!-- more -->
<figure data-type="image" tabindex="2"><img src="https://blog.heiye.dev/post-images/1563887383522.png" alt=""></figure>
<h1 id="0x01-git-配置">0x01 Git 配置</h1>
<p>1.1 在安装完成 Git 后，开始正式使用前，是需要有一些全局设置的，如用户名、邮箱。<br>
设置的主要命令是 <code>git config</code>:</p>
<pre><code>git config --global user.name &quot;your name&quot;      // 设置全局用户名
git config --global user.email &quot;your email&quot;    // 设置邮箱
</code></pre>
<p>其中， --global 指定为全局配置，不使用该参数，则为当前所在仓库配置。<br>
1.2 除了用户名、邮箱之外，还有很多的配置可以用来自定义 Git，如：</p>
<pre><code>git config --global color.ui true        // 让 Git 显示不同的颜色
git config core.ignorecase true            // 让 Git 对仓库中的文件大小写敏感
</code></pre>
<p>1.3 查看所有的已经做出的配置：</p>
<pre><code>git config --global color.ui true        // 让 Git 显示不同的颜色
git config core.ignorecase true            // 让 Git 对仓库中的文件大小写敏感
</code></pre>
<p>1.3 查看所有的已经做出的配置：</p>
<pre><code>git config -l

</code></pre>
<p>0x02 基础操作</p>
<h2 id="1-创建-git-版本库">1. 创建 Git 版本库</h2>
<p>在本地创建 Git 版本库，需要使用 <code>git init</code> 命令。</p>
<p>首先，你需要新建一个存放版本库的目录，然后进入到该目录所在路径，然后执行：</p>
<pre><code>git init
</code></pre>
<p>然后查看目录结构中，就可以看到包含有 .git 子目录，这就说明创建版本库成功了。</p>
<h2 id="2将文件添加到版本库">2.将文件添加到版本库</h2>
<p>要将一个文件纳入到版本库管理，首先要将其添加到暂存区 (这里不做深入介绍)，然后才能提交到仓库中。</p>
<p>2.1 将文件添加到暂存区，使用的是 <code>git add</code>：</p>
<pre><code>git add Readme.md        // 添加单个文件到暂存区
git add .                // 将当前目录下所有修改添加到暂存区，除按照规则忽略的之外
</code></pre>
<blockquote>
<p>注意：这边空文件夹是不会被添加到暂存区中的。</p>
</blockquote>
<p>2.2 将暂存区中的文件，提交到仓库中。需要使用 <code>git commit</code>：</p>
<pre><code>git commit        // 如果暂存区有文件，则将其中的文件提交到仓库
git commit -m 'your comments'         // 带评论提交，用于说明提交内容、变更、作用等
</code></pre>
<blockquote>
<p>注意：这边直接用 git commit 提交，会先弹出添加评论的页面。</p>
</blockquote>
<h3 id="3查看仓库的状态">3.查看仓库的状态</h3>
<p>不论我们是新建了文件，将文件加入暂存区，或者其他的修改等等，我们都可以通过：</p>
<pre><code>git status

</code></pre>
<p>来随时查看仓库中文件的状态。这个应该是使用 Git 做版本控制过程中，我使用最多的一个命令。</p>
<h3 id="4查看仓库中的具体修改">4.查看仓库中的具体修改</h3>
<p>很经常的，我们对某个文件做了修改，但过不久就忘记了。这时候就可以通过<code>git diff</code>来查看具体的修改内容。</p>
<pre><code>git diff    // 查看版本库中所有的改动
git diff Readme.md        // 查看具体文件的改动
</code></pre>
<h3 id="5查看提交历史记录">5.查看提交历史记录</h3>
<p>有的时候，你会需要查看自己做过哪些提交，来回顾自己完成的部分。或者需要寻找某个具体的提交来查看当时的代码。这里需要用到：</p>
<pre><code>git log     // 显示所有提交的历史记录
git log --pretty=oneline    // 单行显示提交历史记录的内容
</code></pre>
<p>在 <code>git log</code> 的输出内容中，可以看到每次提交的 ID，是一个 40 位的字符串。</p>
<h3 id="6版本回退">6.版本回退</h3>
<p>有了 <code>git log</code> 来查看提交的历史记录，我们就可以通过 <code>git reset --hard</code> 来回退到我们需要的特定版本，然后使用当时的代码进行各种操作</p>
<pre><code>git reset --hard HEAD^        // 回退到上一个提交版本
git reset --hard HEAD^^        // 回退到上上一个提交版本
git reset --hard 'commit_id'    // 会退到 commit_id 指定的提交版本
</code></pre>
<h3 id="7回到未来的某个提交">7.回到未来的某个提交</h3>
<p>当退回到某个提交的版本以后，再通过 <code>git log</code> 是无法显示在这之后的提交信息的。但是，通过 <code>git reflog</code>可以获取到操作命令的历史。</p>
<p>因此，想要回到未来的某个提交，先通过<code>git reflog</code>从历史命令中找到想要回到的提交版本的 ID，然后通过 <code>git reset --hard</code>来切换。</p>
<pre><code>git reflog
git reset --hard 'commit_id'
</code></pre>
<h3 id="8撤销修改">8.撤销修改</h3>
<p>撤销修改同样包括两方面的内容，由于仓库中的文件在提交之前，可能在工作区中，尚未在版本控制范围内，也可能在暂存区中。</p>
<p>8.1 丢弃工作区中文件的修改</p>
<pre><code>git checkout -- Readme.md    // 如果 Readme.md 文件在工作区，则丢弃其修改
git checkout -- .            // 丢弃当前目录下所有工作区中文件的修改
</code></pre>
<blockquote>
<p>注意： git checkout -- 中的 -- 是必须的。<br>
8.2 丢弃已经进入暂存区的修改</p>
</blockquote>
<pre><code>git reset HEAD Readme.md // 将 Readme.md 恢复到 HEAD 提交版本的状态
</code></pre>
<h3 id="9-删除文件">9. 删除文件</h3>
<p>在文件未添加到暂存区之前，对想删除文件可以直接物理删除。或者通过 <code>git checkout -- file</code></p>
<blockquote>
<p>来丢弃。如果文件已经被提交，则需要 git rm 来删除：</p>
</blockquote>
<pre><code>git rm Readme.md // 删除已经被提交过的 Readme.md

</code></pre>
<blockquote>
<p>注意： git rm 只能删除已经提交到版本库中的文件。其他状态的文件直接用这个命令操作是出错的。</p>
</blockquote>
<h2 id="0x03-分支管理">0x03 分支管理</h2>
<p>分支是版本控制系统中很重要的一个概念，在 Git 中新建、合并等分支的操作非常轻量便捷，因此我们会很经常的用到。<br>
<img src="https://blog.heiye.dev/post-images/1563887353366.jpg" alt=""></p>
<h3 id="1-查看分支">1. 查看分支</h3>
<p>查看分支使用 <code>git branch</code>：</p>
<pre><code>git branch        // 查看本地分支信息
git branch -v     // 查看相对详细的本地分支信息
git branch -av     // 查看包括远程仓库在内的分支信息
</code></pre>
<blockquote>
<p>注意：在 git branch 的输出内容中，有一个分支，前面带有 * 号，这标识我们当前所在的分支。</p>
</blockquote>
<h3 id="2-创建分支">2. 创建分支</h3>
<p>当我们要修复一个 Bug，或者开发一个新特性，甚至是在初学的时候怕打乱原来的代码，都可以新建一个分支来避免对原来代码的影响。</p>
<pre><code>git branch dev // 新建一个名称为 dev 的分支

</code></pre>
<h3 id="3-切换分支">3. 切换分支</h3>
<p>当我们创建完分支以后，我们需要切换到新建的分支，否则，所有的修改，还是在原来的分支上。事实上，所有的改动，只能影响到当前所在的分支。</p>
<pre><code>git checkout dev // 新建完 dev 分支以后，通过该命令切换到 dev 分支
</code></pre>
<h3 id="4-创建并切换分支">4. 创建并切换分支</h3>
<pre><code>git checkout -b dev // 新建 dev 分支，并切换到该分支上

</code></pre>
<p>这个命令合并了前两个独立的命令，平常使用中一般这样使用。</p>
<h3 id="5-合并分支">5. 合并分支</h3>
<p>当我们修复完成一个 Bug，或者开发完成一个新特性，我们就会把相关的 Bug 或者 特性的上修改合并回原来的主分支上，这时候就需要 <code>git merge</code> 来做分支的合并。</p>
<p>首先需要切换回最终要合并到的分支，如 master：</p>
<pre><code>git checkout master        // 切换回 master 分支
git merge dev            // 将 dev 分钟中的修改合并回 master 分支
</code></pre>
<p>合并回主分支的时候，后面可能会面临到冲突的问题。冲突的解决暂不在这里说明。</p>
<h3 id="6-删除分支">6. 删除分支</h3>
<p>当之前创建的分支，完成了它的使命，如 Bug 修复完，分支合并以后，这个分支就不在需要了，就可以删除它。</p>
<pre><code>git branch -d dev // 删除 dev 分支
</code></pre>
<h2 id="0x04-远程仓库">0x04 远程仓库</h2>
<p>上面的所有命令都是针对本地仓库的操作。当我们希望多个人来协作时，会将代码发布到一个统一的远程仓库，然后多个人在本地操作以后，在推送到远程仓库。其他人协作时，需要先同步远程仓库的内容，再推送自己的修改。<br>
<img src="https://blog.heiye.dev/post-images/1563887619547.jpg" alt=""></p>
<h3 id="1-从远程仓库克隆">1. 从远程仓库克隆</h3>
<p>如果你本地没有仓库，希望从已有的远程仓库上复制一份代码，那么你需要 <code>git clone</code>。</p>
<pre><code>git clone https://github.com/git/git.git     // 通过 https 协议，克隆 Github 上 git 仓库的源码
git clone linfuyan@github.com/git/git.git    // 通过 ssh 协议，克隆 Github 上 git 仓库的源码
</code></pre>
<blockquote>
<p>注意： git clone 后面的仓库地址，可以支持多种协议，如 https， ssh 等。</p>
</blockquote>
<h3 id="2-添加远程仓库">2. 添加远程仓库</h3>
<p>如果你已经有了一个本地仓库，如之前创建的 <code>git-guide</code>，然后你打算将它发布到远程，供其他人协作。那么使用：</p>
<pre><code>git remote add origin your_remote_git_repo // 为本地仓库添加远程仓库

</code></pre>
<h3 id="3-推送本地的内容到远程仓库">3. 推送本地的内容到远程仓库</h3>
<p>当本地仓库中，代码完成提交，就需要将代码等推送到远程仓库，这样其他协作人员可以从远程仓库同步内容。</p>
<pre><code>git push -u origin master // 第一次推送时使用，可以简化后面的推送或者拉取命令使用
git push origin master    // 将本地 master 分支推送到 origin 远程分支
</code></pre>
<blockquote>
<p>注意：<code>git push -u origin master</code>，第一次使用时，带上 -u 参数，在将本地的 master 分支推送到远程新的 master 分支的同时，还会把本地的 master 分支和远程的 master 分支关联起来。</p>
</blockquote>
<h3 id="4-从远程仓库获取最新内容">4. 从远程仓库获取最新内容</h3>
<p>在多人协作过程中，当自己完成了本地仓库中的提交，想要向远程仓库推送前，需要先获取到远程仓库的最新内容。</p>
<p>可以通过 <code>git fetch</code> 和 <code>git pull</code> 来获取远程仓库的内容。</p>
<pre><code>git fetch origin master    
git pull origin master
</code></pre>
<p><code>git fetch</code>和 <code>git pull</code> 之间的区别：</p>
<ul>
<li><code>git fetch</code>是仅仅获取远程仓库的更新内容，并不会自动做合并。</li>
<li><code>git pull</code>在获取远程仓库的内容后，会自动做合并，可以看成 <code>git fetch</code>之后 <code>git merge</code>。</li>
</ul>
<blockquote>
<p>注意：建议多使用 git fetch。</p>
</blockquote>
<h3 id="5-查看远程仓库信息">5. 查看远程仓库信息</h3>
<pre><code>git remote [-v] // 显示远程仓库信息
</code></pre>
<h3 id="6-建立本地分支和远程分支的关联">6. 建立本地分支和远程分支的关联</h3>
<p>在本地仓库中的分支和远程仓库中的分支是对应的。一般情况下，远程仓库中的分支名称和本地仓库中的分支名称是一致的。</p>
<p>有的时候，我们会需要指定本地分支与远程分支的关联。</p>
<pre><code>git branch --set-upstream 'local_branch' origin/remote_branch
</code></pre>
<h3 id="7-修改本地仓库对应的远程仓库地址">7. 修改本地仓库对应的远程仓库地址</h3>
<p>当远程的仓库地址发生变化时，需要修改本地仓库对应的远程仓库的地址。主要应用在工程迁移过程中。</p>
<pre><code>git remote set-url origin url
</code></pre>
<h2 id="0x05-标签管理">0x05 标签管理</h2>
<p>在项目开发过程中，当一个版本发布完成时，是需要对代码打上标签，便于后续检索。获取处于其他的原因，需要对某个提交打上特定的标签。</p>
<h3 id="1-创建标签">1. 创建标签</h3>
<pre><code>git tag -a 'tagname' -m 'comment' 'commit_id'

</code></pre>
<p><code>-a</code> 参数指定标签名，<code>-m</code> 添加备注信息， 'commit_id' 指定打标签的提交。</p>
<h3 id="2-查看所有标签">2. 查看所有标签</h3>
<p>git tag // 查看本地仓库中的所有标签</p>
<h3 id="3-查看具体标签信息">3. 查看具体标签信息</h3>
<pre><code>git show tagname

</code></pre>
<h3 id="4-删除本地标签">4. 删除本地标签</h3>
<p>如果打的标签出错，或者不在需要某个标签，则可以删除它。</p>
<pre><code>git tag -d tagname
</code></pre>
<h3 id="5-删除远程标签">5. 删除远程标签</h3>
<pre><code>git push origin :refs/tags/tagname

git push origin --delete tagname

git push origin :tagname
</code></pre>
<h3 id="6-推送标签到远程仓库">6. 推送标签到远程仓库</h3>
<p>打完标签以后，有需要推送到远程仓库。</p>
<h4 id="61-推送单个标签到远程仓库">6.1 推送单个标签到远程仓库</h4>
<pre><code>git push origin tagname
</code></pre>
<h5 id="62-一次性推送所有标签到远程仓库">6.2 一次性推送所有标签到远程仓库。</h5>
<pre><code>git push origin --tags
</code></pre>
<h2 id="0x06-进阶操作">0x06 进阶操作</h2>
<h3 id="1-临时保存修改">1. 临时保存修改</h3>
<p>在执行很多的 Git 操作的时候，是需要保持当前操作的仓库 / 分支处于 clean 状态，及没有未提交的修改。如<code>git pull</code>， <code>git merge</code> 等等，如果有未提交的修改，这些将无法操作。</p>
<p>但是做这些事情的时候，你可能修改了比较多的代码，却又不想丢弃它。那么，你需要把这些修改临时保存起来，这就需要用到 git stash。</p>
<h4 id="11-临时保存修改这样仓库就可以回到-clean-状态">1.1 临时保存修改，这样仓库就可以回到 clean 状态。</h4>
<pre><code>git stash // 保存本地仓库中的临时修改。
</code></pre>
<blockquote>
<p>注意：可以多次的 git stash 来保存不同的临时修改。</p>
</blockquote>
<h4 id="12-查看临时保存-当你临时保存以后后面还是要取回来的那它们在哪里呢">1.2 查看临时保存。当你临时保存以后，后面还是要取回来的，那它们在哪里呢？</h4>
<pre><code>git stash list // 显示所有临时修改
</code></pre>
<h4 id="13-当我们处理完其他操作时想要恢复临时保存的修改">1.3 当我们处理完其他操作时，想要恢复临时保存的修改。</h4>
<pre><code>git stash apply        // 恢复所有保存的临时修改
git stash pop        // 恢复最近一次保存的临时修改
</code></pre>
<h4 id="14-或者我们后面觉得临时保存不想要了那可以丢弃它">1.4 或者，我们后面觉得临时保存不想要了，那可以丢弃它。</h4>
<pre><code>git stash clear // 丢弃所有保存的临时修改
</code></pre>
<h2 id="0x07-写在最后">0x07 写在最后</h2>
<p>这些是我目前在项目中经常会用到的操作，这里整理下来，可以作为一个手册。对于 Git 的理解或者更多的解释，并不在这里体现。大家可以参考其他更多的资料。例如<a href="https://www.moewah.com/go/aHR0cHM6Ly9naXRodWIuY29tLzUyMXh1ZXdlaWhhbi9naXQtdGlwcw==">《Git 的奇技淫巧》</a>&amp;<a href="https://www.moewah.com/go/aHR0cDovL3JvZ2VyZHVkbGVyLmdpdGh1Yi5pby9naXQtZ3VpZGUvaW5kZXguemguaHRtbA==">《Git 简明指南》</a>&amp;<a href="https://www.moewah.com/go/aHR0cHM6Ly90dXRvcmlhbHppbmUuY29tLzIwMTYvMDYvbGVhcm4tZ2l0LWluLTMwLW1pbnV0ZXNMZWFybiUyMEdpdCUyMGluJTIwMzAlMjBNaW51dGVz">《Learn Git in 30 Minutes》</a></p>
<p>本文来之</p>
<blockquote>
<p>https://www.moewah.com/archives/2292.html</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac 下 pipenv 无法安装 mysqlclient 的办法]]></title>
        <id>https://blog.heiye.dev/post/mac-xia-pipenv-wu-fa-an-zhuang-de-ban-fa</id>
        <link href="https://blog.heiye.dev/post/mac-xia-pipenv-wu-fa-an-zhuang-de-ban-fa">
        </link>
        <updated>2019-07-17T14:38:42.000Z</updated>
        <content type="html"><![CDATA[<p>在开发 Django 的时候，运行  pipenv install mysqlclient 时，有如下报错：<code>'my_config.h' file not found</code></p>
<h1 id="环境">环境</h1>
<ul>
<li>macOS Mojave 10.14.2</li>
<li>python 3.7.1</li>
<li>pip 18.1</li>
<li>mysqlclient 1.3.14</li>
</ul>
<h1 id="解决方法">解决方法：</h1>
<pre><code>brew install mysql-connector-c　
which mysql_config # /usr/local/bin/mysql_config
chmod 777
vim /usr/local/bin/mysql_config 
# 查找 libs=&quot;$libs -l&quot; 改成 libs=&quot;$libs -lmysqlclient -lssl -lcrypto&quot;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac OSX 终端走代理 ]]></title>
        <id>https://blog.heiye.dev/post/mac-osx-zhong-duan-zou-dai-li</id>
        <link href="https://blog.heiye.dev/post/mac-osx-zhong-duan-zou-dai-li">
        </link>
        <updated>2019-07-17T14:19:02.000Z</updated>
        <summary type="html"><![CDATA[<p>用此方法可以加速各种依赖安装的速度</p>
]]></summary>
        <content type="html"><![CDATA[<p>用此方法可以加速各种依赖安装的速度</p>
<!-- more -->
<h1 id="以-zsh-作为说明">以 zsh 作为说明</h1>
<pre><code>➜ ~ vim ~/.zshrc  
</code></pre>
<p>添加如下代理配置:</p>
<pre><code># proxy list
alias proxy='export all_proxy=socks5://127.0.0.1:1080'
alias unproxy='unset all_proxy'
</code></pre>
<p>:wq 保存退出</p>
<pre><code>➜  ~ source ~/.zshrc

</code></pre>
<p>使用 <code>proxy</code> 前先查看下当前的ip地址：</p>
<pre><code>➜  ~ curl ip.cn
当前 IP：112.64.xxx.xx 来自：上海市 联通
</code></pre>
<p>没问题，终端走了代理，brew update 顺畅了- -</p>
<p>如果不需要走代理，执行：</p>
<pre><code>➜  ~ unproxy   
➜  ~ curl ip.cn
当前 IP：112.64.xxx.xx 来自：上海市 联通
</code></pre>
]]></content>
    </entry>
</feed>